import '@testing-library/jest-dom';\n\n// Mock browser APIs\nObject.defineProperty(window, 'chrome', {\n  writable: true,\n  value: {\n    runtime: {\n      sendMessage: jest.fn(),\n      onMessage: {\n        addListener: jest.fn()\n      }\n    }\n  }\n});\n\n// Mock browser extension APIs for Firefox\nObject.defineProperty(window, 'browser', {\n  writable: true,\n  value: {\n    runtime: {\n      sendMessage: jest.fn(),\n      onMessage: {\n        addListener: jest.fn()\n      }\n    }\n  }\n});\n\n// Mock MutationObserver with proper implementation\nglobal.MutationObserver = class MutationObserver {\n  constructor(private callback: MutationCallback) {}\n  disconnect() {}\n  observe(element: Node, initObject?: MutationObserverInit): void {}\n  takeRecords(): MutationRecord[] { return []; }\n};\n\n// Enhanced DOM mocking\nObject.defineProperty(window, 'getComputedStyle', {\n  value: jest.fn(() => ({\n    display: 'block',\n    visibility: 'visible',\n    opacity: '1'\n  }))\n});\n\n// Mock intersection observer for visibility testing\n(global as any).IntersectionObserver = class IntersectionObserver {\n  constructor(private callback: IntersectionObserverCallback) {}\n  disconnect() {}\n  observe() {}\n  unobserve() {}\n  get root() { return null; }\n  get rootMargin() { return '0px'; }\n  get thresholds() { return []; }\n  takeRecords() { return []; }\n};\n\n// Clean console for tests (Jest best practice)\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n\n// Global error handling for tests\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\n// Mock performance API\nObject.defineProperty(window, 'performance', {\n  writable: true,\n  value: {\n    now: jest.fn(() => Date.now())\n  }\n});